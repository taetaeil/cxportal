/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Violet 연동
     * @description Violet 연동
     */
    get: operations['healthcheckHealth']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/ready': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Violet 연동
     * @description Violet 연동
     */
    get: operations['healthcheckReady']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/sign-in/password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 이메일 + 패스워드로 로그인
     * @description 이메일 + 패스워드로 로그인
     */
    post: operations['authSignInPassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * JWT 재발급
     * @description 아직 만료되지 않은 JWT로 유효 기간을 연장한 새 JWT를 발급
     */
    post: operations['authRefresh']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 프로젝트 목록 조회
     * @description 프로젝트 목록 조회
     */
    get: operations['listProject']
    put?: never
    /**
     * 프로젝트 생성
     * @description 프로젝트 생성
     */
    post: operations['createProject']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 프로젝트 단일 조회
     * @description 프로젝트 단일 조회
     */
    get: operations['readProject']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/deployments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 프로젝트 배포 상황 단일 조회
     * @description 프로젝트 배포 상황 단일 조회
     */
    get: operations['readProjectDeployment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 프로젝트 수정
     * @description 프로젝트 수정
     */
    post: operations['updateProject']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/prompt-configs/{promptConfigId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 프롬프트 설정 단일 조회
     * @description Prompt Service 의 GET /api/v1/prompt/{prompt_id} API 를 연결합니다.
     */
    get: operations['readPromptConfig']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/prompt-configs/{promptConfigId}/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 프롬프트 설정 수정
     * @description Prompt Service 의 PUT /api/v1/prompt/version API 를 연결합니다.
     */
    post: operations['updatePromptConfig']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/data-source-configs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 데이터 소스 설정 목록 조회
     * @description 데이터 소스 설정 목록 조회
     */
    get: operations['listDataSourceConfig']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/data-source-configs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 데이터 소스 설정 추가 생성
     * @description 데이터 소스 설정 추가 생성
     */
    post: operations['createDataSourceConfig']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/data-source-configs/{dataSourceConfigId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 데이터 소스 설정 단일 조회
     * @description 데이터 소스 설정 단일 조회
     */
    get: operations['readDataSourceConfig']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/data-source-configs/{dataSourceConfigId}/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 데이터 소스 설정 수정
     * @description 데이터 소스 설정 수정
     */
    post: operations['updateDataSourceConfig']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/data-source-configs/{dataSourceConfigId}/files': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 데이터 소스에 파일 업로드 (RAG42 만 가능)
     * @description 데이터 소스에 파일 업로드 (RAG42 만 가능)
     */
    post: operations['createDataSourceConfigFile']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/data-source-configs/{dataSourceConfigId}/files/{dataSourceConfigFileId}/retry': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 실패한 데이터 소스 파일 재시도 (RAG42 만 가능)
     * @description 실패한 데이터 소스 파일 재시도 (RAG42 만 가능)
     */
    post: operations['retryDataSourceConfigFile']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/agent-engine-configs/{agentEngineConfigId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 에이전트 엔진(Action) 설정 단일 조회
     * @description 에이전트 엔진(Action) 설정 단일 조회
     */
    get: operations['readAgentEngineConfig']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/agent-engine-configs/{agentEngineConfigId}/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 에이전트 엔진(Action) 설정 수정
     * @description 에이전트 엔진(Action) 설정 수정
     */
    post: operations['updateAgentEngineConfig']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/models': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 현재 사용 가능한 모델 목록 조회
     * @description 현재 사용 가능한 모델 목록 조회
     */
    get: operations['listModel']
    put?: never
    /**
     * 새 모델 등록
     * @description 새 모델 등록
     */
    post: operations['createModel']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/data-sources': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 현재 사용 가능한 데이터 소스 목록 조회
     * @description 현재 사용 가능한 데이터 소스 목록 조회
     */
    get: operations['listDataSource']
    put?: never
    /**
     * 새 데이터 소스 추가
     * @description 새 데이터 소스 추가
     */
    post: operations['createDataSource']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/playground/conversations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 이전 대화 목록 조회
     * @description 이전 대화 목록 조회
     */
    get: operations['listPlaygroundConversation']
    put?: never
    /**
     * 이전 대화 생성
     * @description 이전 대화 생성
     */
    post: operations['createPlaygroundConversation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/playground/conversations/{conversationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 이전 대화 메시지 목록 조회
     * @description Prompt Service 의 GET /api/v1/session API 를 연결합니다.
     */
    get: operations['readPlaygroundConversation']
    put?: never
    /**
     * 이전 대화에 새 메시지 목록 추가
     * @description Prompt Service 의 POST /api/v1/session API 를 연결합니다.
     */
    post: operations['updatePlaygroundConversation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/playground/conversations/{conversationId}/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 이전 대화의 메시지 수정 (즐겨찾기, 반응에 사용)
     * @description Prompt Service 의 PATCH /api/v1/session API 를 연결합니다.
     */
    post: operations['updatePlaygroundMessage']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/playground/chat/message': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * API 서버 - 채팅 API 연동
     * @description Project Type 이 GEN 인 경우에만 사용
     *     requestBody 에서 stream 이
     *       true 이면 text/event-stream 응답
     *       false 이면 application/json 응답
     */
    post: operations['playgroundChatMessage']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/playground/chat/setup': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * API 서버 - 채팅 SetUp API 연동
     * @description 플레이그라운드에서 새 채팅창에서 첫 질문을 입력받았을 때, Chat Message API 호출 전 먼저 호출 <br>
     *     발급받은 Conversation Id 를 대화 저장 API 호출에 사용 <br>
     *     발급받은 Conversation Id 를 Chat Message API 호출에 사용
     */
    post: operations['playgroundChatSetup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/playground/chat/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 메시지 또는 대화 요약
     * @description 메시지 또는 대화 요약
     */
    post: operations['playgroundChatSummary']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/playground/vision/ocr': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Core API 서버 - OCR API 연동
     * @description Core API 서버 - OCR API 연동
     */
    post: operations['playgroundVisionOcr']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/playground/audio/tts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Core API 서버 - TTS API 연동
     * @description Core API 서버 - TTS API 연동
     */
    post: operations['playgroundAudioTts']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/projects/{projectId}/playground/audio/stt': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Core API 서버 - STT API 연동
     * @description Core API 서버 - STT API 연동
     */
    post: operations['playgroundAudioStt']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    CommonResBody: {
      /** @example 20000000 */
      responseCode: number
      /** @example success */
      responseMessage: string
    }
    CreateProjectReqBody: {
      data: components['schemas']['ProjectReqBodyBase'] & {
        modelConfig: components['schemas']['ModelConfig']
        promptConfig: {
          name: string
        }
        dataSourceConfigs: (components['schemas']['CreateProjectReqDataSourceConfigBase'] | components['schemas']['CreateProjectReqVSearchDataSourceConfig'])[]
      }
    }
    CreateProjectReqDataSourceConfigBase: {
      type: string
      name: string
    }
    CreateProjectReqVSearchDataSourceConfig: components['schemas']['CreateProjectReqDataSourceConfigBase'] & {
      targetIds: string
    }
    CreateProjectResBodySuccess: components['schemas']['CommonResBody'] & {
      data: components['schemas']['CreateProjectResBodySuccessData']
    }
    CreateProjectResBodySuccessData: {
      /** Format: int64 */
      id: string
    }
    ReadProjectResBodySuccess: components['schemas']['CommonResBody'] & {
      data: components['schemas']['ProjectResBody']
    }
    UpdateProjectReqBody: {
      data: components['schemas']['ProjectReqBodyBase']
    }
    UpdateProjectResBodySuccess: components['schemas']['CommonResBody']
    ListProjectResBodySuccess: components['schemas']['CommonResBody'] & {
      data: components['schemas']['ProjectResBody'][]
      pageInfo: components['schemas']['PageInfo']
    }
    ReadDataSourceConfigResBodySuccess: components['schemas']['CommonResBody'] & {
      data: components['schemas']['ReadDataSourceConfigResBodySuccessData']
    }
    ReadDataSourceConfigResBodySuccessData: components['schemas']['ReadDataSourceConfigResBodySuccessDataVSearch'] | components['schemas']['ReadDataSourceConfigResBodySuccessDataRag42']
    ReadDataSourceConfigResBodySuccessDataVSearch: components['schemas']['DataSourceConfigResBase'] & {
      targetIds: string
      /** @description targetIds 에 명시한 데이터 소스들 각각의 상태 */
      status: ('Progressing' | 'Done')[]
    }
    ReadDataSourceConfigResBodySuccessDataRag42: components['schemas']['DataSourceConfigResBase'] & {
      adminUrl: string
      files: components['schemas']['ReadDataSourceConfigResBodySuccessDataRag42File'][]
    }
    ReadDataSourceConfigResBodySuccessDataRag42File: {
      id: string
      filename: string
      status: string
      /** Format: date-time */
      createdAt: string
    }
    /**
     * @description vsearch 타입인 경우 CreateDataSourceConfigVSearch 사용하고, <br>
     *     다른 타입인 경우 CreateDataSourceConfigBase 사용합니다.
     */
    CreateDataSourceConfigReqBody: {
      data: components['schemas']['CreateDataSourceConfigBase'] | components['schemas']['CreateDataSourceConfigVSearch']
    }
    CreateDataSourceConfigBase: {
      type: string
      name: string
    }
    CreateDataSourceConfigVSearch: components['schemas']['CreateDataSourceConfigBase'] & {
      targetIds: string
    }
    CreateDataSourceConfigResBodySuccess: components['schemas']['CommonResBody'] & {
      data: {
        id: string
      }
    }
    /**
     * @description vsearch 타입인 경우 UpdateDataSourceConfigReqBodyDataVSearch 사용하고, <br>
     *     다른 타입인 경우 UpdateDataSourceConfigReqBodyDataBase 사용합니다.
     */
    UpdateDataSourceConfigReqBody: {
      data: components['schemas']['UpdateDataSourceConfigReqBodyDataBase'] | components['schemas']['UpdateDataSourceConfigReqBodyDataVSearch']
    }
    UpdateDataSourceConfigReqBodyDataBase: {
      name: string
    }
    UpdateDataSourceConfigReqBodyDataVSearch: components['schemas']['UpdateDataSourceConfigReqBodyDataBase'] & {
      targetIds: string
    }
    UpdateDataSourceConfigResBodySuccess: components['schemas']['CommonResBody']
    ListDataSourceConfigResBodySuccess: components['schemas']['CommonResBody'] & {
      data: components['schemas']['ListDataSourceConfigResBodySuccessData']
      pageInfo: components['schemas']['PageInfo']
    }
    ListDataSourceConfigResBodySuccessData: components['schemas']['DataSourceConfigResBase'][]
    CreateDataSourceConfigFileReqBody: {
      /** Format: binary */
      file: string
      isOcr: boolean
      fileUri?: string | null
    }
    CreateDataSourceConfigFileResBodySuccess: components['schemas']['CommonResBody'] & {
      data: {
        /** Format: int64 */
        id: string
      }
    }
    ReadAgentEngineConfigResBodySuccess: components['schemas']['CommonResBody'] & {
      data: components['schemas']['AgentEngineConfig']
    }
    UpdateAgentEngineConfigReqBody: {
      data: components['schemas']['AgentEngineConfig']
    }
    UpdateAgentEngineConfigResBodySuccess: components['schemas']['CommonResBody']
    CreateModelReqBody: {
      data: {
        id: string
        name: string
        isActive: boolean
        endpoint: string | null
        endpointKeys: string | null
        meta: Record<string, never>
      }
    }
    CreateModelResBodySuccess: components['schemas']['CommonResBody']
    ListModelResBodySuccess: components['schemas']['CommonResBody'] & {
      data: components['schemas']['ListModelResBodySuccessDataItem'][]
    }
    ListModelResBodySuccessDataItem: {
      id: string
      name: string
      isActive: boolean
      meta?: {
        isActionable?: boolean | null
        [key: string]: unknown
      } | null
    }
    ListDataSourceResBodySuccess: components['schemas']['CommonResBody'] & {
      data: components['schemas']['ListDataSourceResBodySuccessDataItem'][]
    }
    ListDataSourceResBodySuccessDataItem: {
      type: string
      name: string
      isActive: boolean
    }
    CreatePlaygroundConversationReqBody: {
      data: {
        conversationName: string
        conversationId: string
      }
    }
    CreatePlaygroundConversationResBodySuccess: components['schemas']['CommonResBody'] & {
      data: components['schemas']['CreatePlaygroundConversationResBodySuccessData']
    }
    CreatePlaygroundConversationResBodySuccessData: {
      id: string
    }
    ListPlaygroundConversationResBodySuccess: components['schemas']['CommonResBody'] & {
      data: components['schemas']['ListPlaygroundConversationResBodySuccessData']
    }
    ListPlaygroundConversationResBodySuccessData: {
      bookmark: components['schemas']['ListPlaygroundConversationResBodySuccessDataItem'][]
      default: components['schemas']['ListPlaygroundConversationResBodySuccessDataItem'][]
    }
    ListPlaygroundConversationResBodySuccessDataItem: {
      /**
       * Format: int64
       * @description Studio 에서 관리하는 Conversation ID <br>
       *     Conversation 단일 조회 API 에서 사용
       */
      id: string
      /**
       * Format: int64
       * @description Conversation 이 속한 Project ID
       */
      projectId: string
      name: string
      /** @description Prompt Service 에 매핑된 Conversation ID */
      conversationId: string
    }
    PlaygroundChatMessageReqBody: {
      common: components['schemas']['IxiApiServerCommon']
      messages: {
        /**
         * @description system, assistant, user
         * @example user
         */
        role: string
        /** @example 오늘 할 일 뭐야? */
        content: string
      }[]
      /** @description 덮어쓸 값이 없으면 빈 객체 */
      modelParams: Record<string, never>
      conversationId?: string | null
      userId?: string | null
      /** @example rag42/default */
      dataSourceType?: string | null
      dataSourceId?: string | null
      /** @example azure/gpt-35-turbo */
      modelId?: string | null
      promptId?: string | null
      stream?: boolean | null
      prevDataSourceData?: Record<string, never>[] | null
      /**
       * @description 프롬프트 설정 화면에서 프롬프트 테스트할 때 사용 <br>
       *     현재 프롬프트 설정을 넣으면 임시로 덮어쓰기해서 동작함, 덮어쓸 값이 없으면 빈 객체 <br>
       *     스키마는 Prompt Service API 의 Prompt Catalog Schema 와 동일, 단 versions 배열은 빈 배열로
       */
      promptCatalog: Record<string, never>
    }
    PlaygroundChatMessageResBodyDefaultJson: {
      /** @example 20000000 */
      responseCode: number
      /** @example OK */
      responseMsg: string
      conversationId?: string | null
      modelId?: string | null
      modelParams?: Record<string, never>
      messages: {
        /** @description system, assistant, user */
        role: string
        content: string
      }[]
      userId?: string | null
      dataSourceType?: string | null
      dataSourceData?: Record<string, never>[] | null
      rag42Passages?: Record<string, never>[] | null
      finish: components['schemas']['PlaygroundChatMessageResFinish']
    }
    PlaygroundChatMessageResBodyDefaultSse: components['schemas']['PlaygroundChatMessageResBodySuccessSseMessageChunk'] | components['schemas']['PlaygroundChatMessageResBodySuccessSseDataSourceData'] | components['schemas']['PlaygroundChatMessageResBodySuccessSseContext']
    PlaygroundChatMessageResBodySuccessSseMessageChunk: {
      /** @enum {string} */
      streamType: 'messageChunk'
      conversationId?: string | null
      messageChunk: {
        content: string
      }
    }
    PlaygroundChatMessageResBodySuccessSseDataSourceData: {
      /** @enum {string} */
      streamType: 'dataSourceData'
      conversationId?: string | null
      dataSourceType?: string | null
      dataSourceData: Record<string, never>[]
      rag42Passages?: Record<string, never>[] | null
    }
    PlaygroundChatMessageResBodySuccessSseContext: {
      /** @enum {string} */
      streamType: 'context'
      /** @example 20000000 */
      responseCode: number
      responseMsg: string
      conversationId?: string | null
      modelId?: string | null
      modelParams?: Record<string, never>
      userId?: string | null
      finish: components['schemas']['PlaygroundChatMessageResFinish']
    }
    /**
     * @description stop: 정상
     *     length: 최대 토큰 수 제한에 걸림
     *     content_filter: 세이프티/필터에 걸림
     *     (단, 모델 종류에 따라 stop 만 응답할 수 있음)
     * @enum {string}
     */
    PlaygroundChatMessageResFinish: 'stop' | 'length' | 'content_filter'
    PlaygroundChatSetupReqBody: {
      common: components['schemas']['IxiApiServerCommon']
    }
    PlaygroundChatSetupResBodyDefaultJson: {
      /** @example 20000000 */
      responseCode: number
      /** @example OK */
      responseMsg: string
      conversationId: string
    }
    PlaygroundChatSummaryReqBody: {
      common: components['schemas']['IxiApiServerCommon']
      contents: {
        content: string
      }[]
      modelParams: Record<string, never>
      conversationId: string | null
      userId: string | null
      /** @example azure/gpt-35-turbo */
      modelId: string | null
      promptId: string | null
      /** @description 현재 false 로만 동작합니다. */
      stream: boolean
    }
    PlaygroundChatSummaryResBodyDefault: {
      responseCode: number
      responseMsg: string
      conversationId?: string | null
      modelId?: string | null
      modelParams?: Record<string, never>
      summary?: {
        role: string
        content: string
      }[]
      userId?: string | null
      finish?: string
    }
    PlaygroundVisionOcrReqBody: {
      common: components['schemas']['IxiApiServerCommon']
      /** @description 미리 정해둔 모델 ID 중 하나 */
      modelId: string
      modelParams: {
        base64Img: string
      }
    }
    PlaygroundVisionOcrResBodyDefault: {
      /** @example 20000000 */
      responseCode: number
      /** @example OK */
      responseMsg: string
      result?: (number[] | string)[][] | null
    }
    PlaygroundAudioTtsReqBody: {
      common?: components['schemas']['IxiApiServerCommon']
      /** @example ixi-audio/tts:default */
      modelId: string
      modelParams: {
        content: string
        /** @enum {string} */
        speaker: 'female1' | 'female2' | 'male1'
      }
    }
    PlaygroundAudioTtsResBodyDefault: {
      /** @example 20000000 */
      response_code: number
      /** @example OK */
      response_msg: string
      /** @description 요청했던 modelId 값 */
      model_id: string
      /** Format: binary */
      buffer?: string
    }
    PlaygroundAudioSttReqBody: {
      /** @example ixi-audio/stt:default */
      model_id: string
      /** Format: binary */
      audio: string
      /** @example  */
      common_client_ip?: string
      /** @example  */
      common_dev_info?: string
      /** @example  */
      common_os_info?: string
      /** @example  */
      common_nw_info?: string
      /** @example  */
      common_dev_model?: string
      /** @example  */
      common_carrier_type?: string
    }
    PlaygroundAudioSttResBodyDefault: {
      /** @example 20000000 */
      responseCode: number
      /** @example OK */
      responseMsg: string
      result?: {
        text?: string
        modelId?: string
      }
    }
    ProjectReqBodyBase: {
      name: string
      description: string
    }
    ProjectResBody: {
      /** Format: int64 */
      id: string
      name: string
      description: string
      key: components['schemas']['ProjectResKey']
      metric: components['schemas']['ProjectResMetric']
      modelConfig: components['schemas']['ModelConfig']
      promptConfig: components['schemas']['ProjectResPromptConfig']
      dataSourceConfigs: components['schemas']['ProjectResDataSourceConfig'][]
      apiAgentEngineConfig: components['schemas']['ProjectResAgentEngineConfig']
      agentEngineConfig: components['schemas']['ProjectResAgentEngineConfig']
      /** Format: date-time */
      createdAt: string
      createdBy: string
      /** Format: date-time */
      updatedAt: string
      updatedBy: string
    }
    ProjectResPromptConfig: {
      /** @description Prompt Config ID 입니다. 프롬프트 설정 CRUD API 의 Path Param 에 사용합니다. */
      id: string
      name: string
      /** @description Prompt ID / Prompt Catalog ID 입니다. 프롬프트 설정 수정 (새 버전 생성) API 의 Req Body 에서 prompt id 항목에 사용합니다. */
      promptId: string
    }
    ProjectResDataSourceConfig: {
      /** @description Data Source Config ID 입니다. 데이터 소스 설정 CRUD API 의 Path Param, 파일 업로드 API 의 Form Data 에 사용합니다. */
      id: string
      /**
       * @description Data Source 의 타입입니다. <br>
       *     타입에 따라 API 호출 조건이 다릅니다. <br>
       *     dataSourceId 와 함께 Chat Message API 에서 Data Source 를 지정할 때 사용합니다. (dataSourceType)
       */
      type: string
      name: string
      /**
       * @description Data Source Config 에 매핑된 Data Source ID 입니다. <br>
       *     배치 프로세스에서 RAG42 파일 업로드 API 의 Req Body 에서 project key 항목에 사용합니다. <br>
       *     type 과 함께 Chat Message API 에서 Data Source 를 지정할 때 사용합니다. (dataSourceId)
       */
      dataSourceId: string
    }
    ProjectResAgentEngineConfig: {
      /** @description Agent Engine Config ID 입니다. 에이전트 엔진 설정 CRUD API 의 Path Param 에 사용합니다. */
      id: string
      /**
       * @description 프로젝트에서 어떤 목적의 에이전트 엔진 설정인지 표현합니다. <br>
       *     API : 일반적인 LLM 사용 시나리오에서 Action(외부 API 등) 연동을 위한 Agent Engine Config <br>
       *     AGENT : Agent Engine 에서 사용할 Action 연동을 위한 Agent Engine Config
       */
      type: string
      /** @description Agent Engine Config 에 매핑된 Agent ID 입니다. */
      agentEngineId: string
    }
    ProjectResKey: {
      id: string
      key: string
    }
    ProjectResMetric: {
      apiCount: number
      tokenCount: number
    }
    DataSourceConfigResBase: {
      /** Format: int64 */
      id: string
      name: string
      project: components['schemas']['DataSourceConfigResBaseProject']
      /** @example vsaerch/confluence */
      dataSourceType: string
      /** @description Data Source Config 에 매핑된 Data Source ID 입니다. */
      dataSourceId: string
      createdBy: string
      /** Format: date-time */
      createdAt: string
      updatedBy: string
      /** Format: date-time */
      updatedAt: string
    }
    DataSourceConfigResBaseProject: {
      /** Format: int64 */
      id: string
      name: string
    }
    ModelConfig: {
      /** @example azure/gpt-35-turbo */
      id: string
    }
    AgentEngineConfig: {
      /** @description API 또는 AGENT, 수정 불가능 */
      type: string
      /** @description API 타입인 경우 1 로 고정, 수정 불가능 (화면에 설정 UI 표시 X) */
      maxIteration: number
      actions: components['schemas']['AgentEngineConfigAction'][]
    }
    AgentEngineConfigAction: {
      /** @description 같은 Agent 안에서는 name 이 중복되면 안 됩니다. */
      name: string
      description: string
      apiUrl: string
      /**
       * @description JSON Schema 를 따르는 JSON 문자열 <br>
       *     현재 각 파라미터의 허용 타입 : string, number, integer, boolean <br>
       *     nullable 파라미터는 required 목록에서 제외하고 "nullable": true 로 명시
       * @example {"type":"object","properties":{"location":{"type":"string","description":"The city and state, e.g. San Francisco, CA"},"unit":{"type":"string","enum":["celsius","fahrenheit"]}},"required":["location"]}
       */
      parameters: string
    }
    PageInfo: {
      total: number
    }
    IxiApiServerCommon: {
      /** @example  */
      clientIp: string
      /** @example  */
      devInfo: string
      /** @example  */
      osInfo: string
      /** @example  */
      nwInfo: string
      /** @example  */
      devModel: string
      /** @example  */
      carrierType: string
    }
  }
  responses: {
    /** @description 실패 */
    CommonError: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example 50000000 */
          responseCode: number
          /** @example error */
          responseMessage: string
        }
      }
    }
    /** @description 성공 */
    CommonSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['CommonResBody']
      }
    }
    /** @description 성공 */
    CreateProjectSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['CreateProjectResBodySuccess']
      }
    }
    /** @description 성공 */
    ReadProjectSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['ReadProjectResBodySuccess']
      }
    }
    /** @description 성공 */
    UpdateProjectSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['UpdateProjectResBodySuccess']
      }
    }
    /** @description 성공 */
    ListProjectSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['ListProjectResBodySuccess']
      }
    }
    /** @description 성공 */
    CreateDataSourceConfigSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['CreateDataSourceConfigResBodySuccess']
      }
    }
    /** @description 성공 */
    ReadDataSourceConfigSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['ReadDataSourceConfigResBodySuccess']
      }
    }
    /** @description 성공 */
    UpdateDataSourceConfigSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['UpdateDataSourceConfigResBodySuccess']
      }
    }
    /** @description 성공 */
    ListDataSourceConfigSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['ListDataSourceConfigResBodySuccess']
      }
    }
    /** @description 성공 */
    CreateDataSourceConfigFileSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['CreateDataSourceConfigFileResBodySuccess']
      }
    }
    /** @description 성공 */
    ReadAgentEngineConfigSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['ReadAgentEngineConfigResBodySuccess']
      }
    }
    /** @description 성공 */
    UpdateAgentEngineConfigSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['UpdateAgentEngineConfigResBodySuccess']
      }
    }
    /** @description 성공 */
    CreateModelSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['CreateModelResBodySuccess']
      }
    }
    /** @description 성공 */
    ListModelSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['ListModelResBodySuccess']
      }
    }
    /** @description 성공 */
    ListDataSourceSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['ListDataSourceResBodySuccess']
      }
    }
    /** @description 성공 */
    CreatePlaygroundConversationSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['CreatePlaygroundConversationResBodySuccess']
      }
    }
    /** @description 성공 */
    ListPlaygroundConversationSuccess: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['ListPlaygroundConversationResBodySuccess']
      }
    }
    /** @description 기본 */
    PlaygroundChatMessageDefault: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['PlaygroundChatMessageResBodyDefaultJson']
        'text/event-stream': components['schemas']['PlaygroundChatMessageResBodyDefaultSse']
      }
    }
    /** @description 기본 */
    PlaygroundChatSetupDefault: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['PlaygroundChatSetupResBodyDefaultJson']
      }
    }
    /** @description 기본 */
    PlaygroundChatSummaryDefault: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['PlaygroundChatSummaryResBodyDefault']
      }
    }
    /** @description 기본 */
    PlaygroundVisionOcrDefault: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['PlaygroundVisionOcrResBodyDefault']
      }
    }
    /** @description 기본 */
    PlaygroundAudioTtsDefault: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'multipart/form-data': components['schemas']['PlaygroundAudioTtsResBodyDefault']
      }
    }
    /** @description 기본 */
    PlaygroundAudioSttDefault: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['PlaygroundAudioSttResBodyDefault']
      }
    }
  }
  parameters: {
    /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
    RequestId: string
    PaginationPageQuery: number
    PaginationSizeQuery: number
    /** @description 프로젝트 이름 or 프로젝트 키 */
    ListProjectQueryQ: string
    ListDataSourceConfigQueryDataSourceType: string
    /** @description 지정 안 하는 경우 전체로 동작 */
    ListDataSourceConfigQueryQType: 'dataSourceName' | 'projectName'
    /** @description 프로젝트 이름 or 데이터 소스 이름 */
    ListDataSourceConfigQueryQ: string
    PathParamProjectId: string
    PathParamPromptConfigId: string
    PathParamDataSourceConfigId: string
    PathParamDataSourceConfigFileId: string
    PathParamAgentEngineConfigId: string
    PathParamConversationId: string
  }
  requestBodies: {
    /** @description 생성할 프로젝트 */
    CreateProject: {
      content: {
        'application/json': components['schemas']['CreateProjectReqBody']
      }
    }
    /** @description 수정할 프로젝트 */
    UpdateProject: {
      content: {
        'application/json': components['schemas']['UpdateProjectReqBody']
      }
    }
    /** @description 데이터 소스 추가 생성 */
    CreateDataSourceConfig: {
      content: {
        'application/json': components['schemas']['CreateDataSourceConfigReqBody']
      }
    }
    /** @description 수정할 데이터 소스 설정 */
    UpdateDataSourceConfig: {
      content: {
        'application/json': components['schemas']['UpdateDataSourceConfigReqBody']
      }
    }
    /**
     * @description 추가할 파일 데이터<br>
     *     rag42 타입에서만 호출 가능합니다.<br>
     *     전체 Request 의 Content-Length 용량 제한은 2MiB 입니다.
     */
    CreateDataSourceConfigFile: {
      content: {
        'multipart/form-data': components['schemas']['CreateDataSourceConfigFileReqBody']
      }
    }
    /** @description 수정할 에이전트 엔진(Action) 설정 */
    UpdateAgentEngineConfig: {
      content: {
        'application/json': components['schemas']['UpdateAgentEngineConfigReqBody']
      }
    }
    /** @description 생성할 모델 정보 */
    CreateModel: {
      content: {
        'application/json': components['schemas']['CreateModelReqBody']
      }
    }
    /** @description 새 이전 대화 생성 요청 데이터 */
    CreatePlaygroundConversation: {
      content: {
        'application/json': components['schemas']['CreatePlaygroundConversationReqBody']
      }
    }
    /** @description 채팅 API 요청 데이터 */
    PlaygroundChatMessage: {
      content: {
        'application/json': components['schemas']['PlaygroundChatMessageReqBody']
      }
    }
    /** @description 채팅 API 요청 데이터 */
    PlaygroundChatSetup: {
      content: {
        'application/json': components['schemas']['PlaygroundChatSetupReqBody']
      }
    }
    /** @description 요약 API 요청 데이터 */
    PlaygroundChatSummary: {
      content: {
        'application/json': components['schemas']['PlaygroundChatSummaryReqBody']
      }
    }
    /** @description OCR API 요청 데이터 */
    PlaygroundVisionOcr: {
      content: {
        'application/json': components['schemas']['PlaygroundVisionOcrReqBody']
      }
    }
    /** @description TTS API 요청 데이터 */
    PlaygroundAudioTts: {
      content: {
        'application/json': components['schemas']['PlaygroundAudioTtsReqBody']
      }
    }
    /** @description STT API 요청 데이터 */
    PlaygroundAudioStt: {
      content: {
        'multipart/form-data': components['schemas']['PlaygroundAudioSttReqBody']
      }
    }
  }
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  healthcheckHealth: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['CommonSuccess']
      default: components['responses']['CommonError']
    }
  }
  healthcheckReady: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['CommonSuccess']
      default: components['responses']['CommonError']
    }
  }
  authSignInPassword: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path?: never
      cookie?: never
    }
    /** @description 이메일 + 패스워드 */
    requestBody: {
      content: {
        'application/json': {
          data: {
            /** Format: email */
            email: string
            password: string
          }
        }
      }
    }
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CommonResBody'] & {
            data: {
              accessToken: string
              refreshToken: string
              id: string
              name: string
              isSuperuser: boolean
            }
          }
        }
      }
      default: components['responses']['CommonError']
    }
  }
  authRefresh: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path?: never
      cookie?: never
    }
    /** @description Refresh Token */
    requestBody: {
      content: {
        'application/json': {
          data: {
            token: string
          }
        }
      }
    }
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CommonResBody'] & {
            data: {
              accessToken: string
              refreshToken: string
            }
          }
        }
      }
      default: components['responses']['CommonError']
    }
  }
  listProject: {
    parameters: {
      query?: {
        page?: components['parameters']['PaginationPageQuery']
        size?: components['parameters']['PaginationSizeQuery']
        /** @description 프로젝트 이름 or 프로젝트 키 */
        q?: components['parameters']['ListProjectQueryQ']
      }
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['ListProjectSuccess']
      default: components['responses']['CommonError']
    }
  }
  createProject: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path?: never
      cookie?: never
    }
    requestBody: components['requestBodies']['CreateProject']
    responses: {
      200: components['responses']['CreateProjectSuccess']
      default: components['responses']['CommonError']
    }
  }
  readProject: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['ReadProjectSuccess']
      default: components['responses']['CommonError']
    }
  }
  readProjectDeployment: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CommonResBody'] & {
            data: {
              isDeployed: boolean
            }
          }
        }
      }
      default: components['responses']['CommonError']
    }
  }
  updateProject: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['UpdateProject']
    responses: {
      200: components['responses']['UpdateProjectSuccess']
      default: components['responses']['CommonError']
    }
  }
  readPromptConfig: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
        promptConfigId: components['parameters']['PathParamPromptConfigId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      default: components['responses']['CommonError']
    }
  }
  updatePromptConfig: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
        promptConfigId: components['parameters']['PathParamPromptConfigId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': Record<string, never>
      }
    }
    responses: {
      default: components['responses']['CommonError']
    }
  }
  listDataSourceConfig: {
    parameters: {
      query?: {
        page?: components['parameters']['PaginationPageQuery']
        size?: components['parameters']['PaginationSizeQuery']
        dataSourceType?: components['parameters']['ListDataSourceConfigQueryDataSourceType']
        /** @description 지정 안 하는 경우 전체로 동작 */
        qType?: components['parameters']['ListDataSourceConfigQueryQType']
        /** @description 프로젝트 이름 or 데이터 소스 이름 */
        q?: components['parameters']['ListDataSourceConfigQueryQ']
      }
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['ListDataSourceConfigSuccess']
      default: components['responses']['CommonError']
    }
  }
  createDataSourceConfig: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['CreateDataSourceConfig']
    responses: {
      200: components['responses']['CreateDataSourceConfigSuccess']
      default: components['responses']['CommonError']
    }
  }
  readDataSourceConfig: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
        dataSourceConfigId: components['parameters']['PathParamDataSourceConfigId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['ReadDataSourceConfigSuccess']
      default: components['responses']['CommonError']
    }
  }
  updateDataSourceConfig: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
        dataSourceConfigId: components['parameters']['PathParamDataSourceConfigId']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['UpdateDataSourceConfig']
    responses: {
      200: components['responses']['UpdateDataSourceConfigSuccess']
      default: components['responses']['CommonError']
    }
  }
  createDataSourceConfigFile: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
        dataSourceConfigId: components['parameters']['PathParamDataSourceConfigId']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['CreateDataSourceConfigFile']
    responses: {
      200: components['responses']['CreateDataSourceConfigFileSuccess']
      default: components['responses']['CommonError']
    }
  }
  retryDataSourceConfigFile: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
        dataSourceConfigId: components['parameters']['PathParamDataSourceConfigId']
        dataSourceConfigFileId: components['parameters']['PathParamDataSourceConfigFileId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['CommonSuccess']
      default: components['responses']['CommonError']
    }
  }
  readAgentEngineConfig: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
        agentEngineConfigId: components['parameters']['PathParamAgentEngineConfigId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['ReadAgentEngineConfigSuccess']
      default: components['responses']['CommonError']
    }
  }
  updateAgentEngineConfig: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
        agentEngineConfigId: components['parameters']['PathParamAgentEngineConfigId']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['UpdateAgentEngineConfig']
    responses: {
      200: components['responses']['UpdateAgentEngineConfigSuccess']
      default: components['responses']['CommonError']
    }
  }
  listModel: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['ListModelSuccess']
      default: components['responses']['CommonError']
    }
  }
  createModel: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path?: never
      cookie?: never
    }
    requestBody: components['requestBodies']['CreateModel']
    responses: {
      200: components['responses']['CreateModelSuccess']
      default: components['responses']['CommonError']
    }
  }
  listDataSource: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['ListDataSourceSuccess']
      default: components['responses']['CommonError']
    }
  }
  createDataSource: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path?: never
      cookie?: never
    }
    /** @description 생성할 데이터 소스 정보 */
    requestBody: {
      content: {
        'application/json': {
          data: {
            type: string
            name: string
            isActive: boolean
          }
        }
      }
    }
    responses: {
      200: components['responses']['CommonSuccess']
      default: components['responses']['CommonError']
    }
  }
  listPlaygroundConversation: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: components['responses']['ListPlaygroundConversationSuccess']
      default: components['responses']['CommonError']
    }
  }
  createPlaygroundConversation: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['CreatePlaygroundConversation']
    responses: {
      200: components['responses']['CreatePlaygroundConversationSuccess']
      default: components['responses']['CommonError']
    }
  }
  readPlaygroundConversation: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
        conversationId: components['parameters']['PathParamConversationId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      default: components['responses']['CommonError']
    }
  }
  updatePlaygroundConversation: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
        conversationId: components['parameters']['PathParamConversationId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      default: components['responses']['CommonError']
    }
  }
  updatePlaygroundMessage: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
        conversationId: components['parameters']['PathParamConversationId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      default: components['responses']['CommonError']
    }
  }
  playgroundChatMessage: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['PlaygroundChatMessage']
    responses: {
      default: components['responses']['PlaygroundChatMessageDefault']
    }
  }
  playgroundChatSetup: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['PlaygroundChatSetup']
    responses: {
      default: components['responses']['PlaygroundChatSetupDefault']
    }
  }
  playgroundChatSummary: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['PlaygroundChatSummary']
    responses: {
      default: components['responses']['PlaygroundChatSummaryDefault']
    }
  }
  playgroundVisionOcr: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['PlaygroundVisionOcr']
    responses: {
      default: components['responses']['PlaygroundVisionOcrDefault']
    }
  }
  playgroundAudioTts: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['PlaygroundAudioTts']
    responses: {
      default: components['responses']['PlaygroundAudioTtsDefault']
    }
  }
  playgroundAudioStt: {
    parameters: {
      query?: never
      header: {
        /** @example 3a750cfe-80a2-4ca9-9bc0-53f1b7a2b9f4 */
        'X-Request-Id': components['parameters']['RequestId']
      }
      path: {
        projectId: components['parameters']['PathParamProjectId']
      }
      cookie?: never
    }
    requestBody: components['requestBodies']['PlaygroundAudioStt']
    responses: {
      default: components['responses']['PlaygroundAudioSttDefault']
    }
  }
}
