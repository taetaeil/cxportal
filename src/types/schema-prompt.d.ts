/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Health */
    get: operations['health_v1_health_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/ready': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Ready */
    get: operations['ready_v1_ready_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/metrics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Metrics Handler */
    get: operations['metrics_handler_v1_metrics_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prompt/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Prompt Catalogs */
    get: operations['get_prompt_catalogs_api_v1_prompt_list_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prompt/{prompt_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Prompt Catalog */
    get: operations['get_prompt_catalog_api_v1_prompt__prompt_id__get']
    put?: never
    post?: never
    /** Delete Prompt Catalog */
    delete: operations['delete_prompt_catalog_api_v1_prompt__prompt_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prompt/version': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Merge Prompt Catalog */
    put: operations['merge_prompt_catalog_api_v1_prompt_version_put']
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Update Prompt Catalog Version */
    patch: operations['update_prompt_catalog_version_api_v1_prompt_version_patch']
    trace?: never
  }
  '/api/v1/prompt/default/{prompt_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Create Default Prompt Catalog */
    put: operations['create_default_prompt_catalog_api_v1_prompt_default__prompt_id__put']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prompt/version/{version_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Delete Prompt Catalog Version */
    delete: operations['delete_prompt_catalog_version_api_v1_prompt_version__version_id__delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/session': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Messages
     * @description get messages from session history
     *
     *     Args
     *     ----------
     *     - `k`: top k
     *
     *     Return
     *     ----------
     */
    get: operations['get_messages_api_v1_session_get']
    put?: never
    /**
     * Add Messages
     * @description add messages to session history
     *     - save messages and return existing conversation_id if conversation_id is exist.
     *     - return empty message list and new conversation_id on header if conversation_id is not exist.
     *
     *     Args
     *     ----------
     *     - `ttl`: time to live (seconds)
     *     - `user_id`: can be passed "studio/joonie" in the case of studio
     *
     *     Return
     *     ----------
     *     - `response_code`
     *     - `response_msg`
     */
    post: operations['add_messages_api_v1_session_post']
    /**
     * Delete Messages
     * @description delete messages by conversation-id
     */
    delete: operations['delete_messages_api_v1_session_delete']
    options?: never
    head?: never
    /**
     * Update Message
     * @description update message to session history
     *
     *     Args
     *     ----------
     *     - `ttl`: time to live (seconds)
     *     - `user_id`: can be passed "studio/joonie" in the case of studio
     *
     *     Return
     *     ----------
     *     - `response_code`
     *     - `response_msg`
     */
    patch: operations['update_message_api_v1_session_patch']
    trace?: never
  }
  '/api/v1/session/conversation-id': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Conv Id
     * @description - return new conversation_id if it's not exist
     *     - return existing conversation_id if it is already exist
     *
     *     Args
     *     ----------
     *
     *     Return
     *     ----------
     */
    get: operations['get_conv_id_api_v1_session_conversation_id_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/session/conversations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Favorite Conversations
     * @description Return favorite and non-favorite conversation_id lists from the received conversation_id list.
     *
     *     Args
     *     ----------
     *     - `conversation_ids`: target conversation-id list
     */
    get: operations['get_favorite_conversations_api_v1_session_conversations_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/session/documents': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add Documents
     * @description add documents
     */
    post: operations['add_documents_api_v1_session_documents_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][]
    }
    /** PromptCatalogDefaultCreateSchema */
    PromptCatalogDefaultCreateSchema: {
      /** prompt name */
      name: string
      /** prompt description */
      description: string | null
      /** project id */
      project_id?: string
      /** model id */
      model_id: string
    }
    /**
     * PromptCatalogListResponseSchema
     * @description Prompt Response Schema
     */
    PromptCatalogListResponseSchema: {
      /**
       * Response Code
       * @default 20000000
       */
      response_code: number
      /**
       * Response Msg
       * @default OK
       */
      response_msg: string
      /**
       * Prompt Catalogs
       * @default []
       */
      prompt_catalogs: components['schemas']['PromptCatalogSchema'][]
    }
    /**
     * PromptCatalogMessageResponseSchema
     * @description Prompt Catalog Response Schema
     */
    PromptCatalogMessageResponseSchema: {
      /**
       * Response Code
       * @default 20000000
       */
      response_code: number
      /**
       * Response Msg
       * @default OK
       */
      response_msg: string
      prompt_catalog?: components['schemas']['PromptCatalogSchema'] | null
      /**
       * Messages
       * @default []
       */
      messages: components['schemas']['SessionMessageSchema'][]
      /**
       * Documents
       * @default []
       */
      documents: Record<string, never>[]
    }
    /**
     * PromptCatalogResponseSchema
     * @description Prompt Catalog Response Schema
     */
    PromptCatalogResponseSchema: {
      /**
       * Response Code
       * @default 20000000
       */
      response_code: number
      /**
       * Response Msg
       * @default OK
       */
      response_msg: string
      prompt_catalog?: components['schemas']['PromptCatalogSchema'] | null
    }
    /** PromptCatalogSchema */
    PromptCatalogSchema: {
      /** 프롬프트 id */
      id: string
      /** ixi studio 사용자 id */
      user_id: string
      /** 프로젝트 id */
      project_id: string
      /** 프롬프트 이름 */
      name: string
      /** 프롬프트 태그 */
      tag: string
      /** 프롬프트 설명 */
      description: string | null
      /** 활성화 여부 */
      is_active: boolean
      /** 공개 여부 */
      is_public: boolean
      /** activated version */
      activated_version: components['schemas']['PromptCatalogVersionSchema']
      /** 버전 리스트 */
      versions: components['schemas']['PromptCatalogVersionSchema'][]
    }
    /** PromptCatalogVersionCreateSchema */
    PromptCatalogVersionCreateSchema: {
      /** version id */
      id?: string | null
      /** prompt id */
      prompt_id: string
      /** model id */
      model_id: string
      /** version name */
      name: string
      /** version description */
      description: string | null
      /** activation */
      is_active: boolean
      /** public status */
      is_public: boolean
      /** sections */
      sections: components['schemas']['PromptSectionsCreateSchema'][] | null
      /** variables */
      variables: components['schemas']['PromptVariablesCreateSchema'][] | null
      /** model parameters */
      model_params: components['schemas']['PromptModelParamsCreateSchema'][] | null
      /** rag parameters */
      datasource_params: components['schemas']['PromptDatasourceParamsCreateSchema'][] | null
    }
    /**
     * PromptCatalogVersionResponseSchema
     * @description Prompt Catalog Version Response Schema
     */
    PromptCatalogVersionResponseSchema: {
      /**
       * Response Code
       * @default 20000000
       */
      response_code: number
      /**
       * Response Msg
       * @default OK
       */
      response_msg: string
      prompt_catalog_version?: components['schemas']['PromptCatalogVersionSchema'] | null
    }
    /** PromptCatalogVersionSchema */
    PromptCatalogVersionSchema: {
      /** version id */
      id: string
      /** version number */
      version_no: number
      /** prompt id */
      prompt_id: string
      /** model id */
      model_id: string
      /** version name */
      name: string
      /** version description */
      description: string
      /** activation */
      is_active: boolean
      /** public status */
      is_public: boolean
      /** sections */
      sections: components['schemas']['PromptSectionsSchema'][]
      /** variables */
      variables: components['schemas']['PromptVariablesSchema'][]
      /** model parameters */
      model_params: components['schemas']['PromptModelParamsSchema'][]
      /** datasource parameters */
      datasource_params: components['schemas']['PromptDatasourceParamsSchema'][]
    }
    /** PromptCatalogVersionUpdateSchema */
    PromptCatalogVersionUpdateSchema: {
      /** version id */
      id: string
      /** model id */
      model_id?: string | null
      /** version name */
      name?: string | null
      /** version description */
      description?: string | null
      /** activation */
      is_active?: boolean | null
      /** public status */
      is_public?: boolean | null
    }
    /** PromptDatasourceParamsCreateSchema */
    PromptDatasourceParamsCreateSchema: {
      /** datasource id */
      id: string
      /** datasource type */
      type: string
      /** datasource type */
      params: Record<string, never>
    }
    /** PromptDatasourceParamsSchema */
    PromptDatasourceParamsSchema: {
      /** datasource id */
      id: string | null
      /** datasource type */
      type: string | null
      /** datasource type */
      params: Record<string, never>
    }
    /** PromptModelParamsCreateSchema */
    PromptModelParamsCreateSchema: {
      /** parameter name */
      name: string
      /** parameter value */
      value: string
    }
    /** PromptModelParamsSchema */
    PromptModelParamsSchema: {
      /** parameter name */
      name: string
      /** parameter value */
      value: string
    }
    /** PromptSectionsCreateSchema */
    PromptSectionsCreateSchema: {
      /** section type */
      type?: string | null
      /** section role */
      role: string
      /** section name */
      name?: string | null
      /** section content */
      content: string
    }
    /** PromptSectionsSchema */
    PromptSectionsSchema: {
      /** section id */
      id: string
      /** section sequence */
      seq: number
      /** type */
      type: string | null
      /** section role */
      role: string
      /**
       * section name
       * @default
       */
      name: string | null
      /** section content */
      content: string
    }
    /** PromptVariablesCreateSchema */
    PromptVariablesCreateSchema: {
      name: string
      type: string
      value?: string | null
      description?: string | null
    }
    /** PromptVariablesSchema */
    PromptVariablesSchema: {
      /** variable id */
      id: string
      name: string
      type: string
      value: string | null
      description: string | null
    }
    /** ResponseSchema */
    ResponseSchema: {
      /**
       * Response Code
       * @default 20000000
       */
      response_code: number
      /**
       * Response Msg
       * @default OK
       */
      response_msg: string
    }
    /**
     * ServerHealthResponse
     * @example {
     *       "status": true
     *     }
     */
    ServerHealthResponse: {
      /** Status */
      status: boolean
      /**
       * Services
       * @default {}
       */
      services: {
        [key: string]: boolean | undefined
      } | null
    }
    /**
     * ServerReadyResponse
     * @example {
     *       "ready": true
     *     }
     */
    ServerReadyResponse: {
      /** Ready */
      ready: boolean
      /**
       * Services
       * @default {}
       */
      services: {
        [key: string]: boolean | undefined
      } | null
    }
    /** SessionDocumentCreateInputSchema */
    SessionDocumentCreateInputSchema: {
      /**
       * time to live (second)
       * @default 86400
       */
      ttl: number | null
      /** group sequence */
      group_seq: number
      /** Documents */
      documents: Record<string, never>[]
    }
    /**
     * SessionFavoriteConversationsResponseSchema
     * @description Prompt Session Response Schema
     */
    SessionFavoriteConversationsResponseSchema: {
      /**
       * Response Code
       * @default 20000000
       */
      response_code: number
      /**
       * Response Msg
       * @default OK
       */
      response_msg: string
      /**
       * Conversation Ids
       * @default []
       */
      conversation_ids: string[]
      /**
       * Favorite Conversation Ids
       * @default []
       */
      favorite_conversation_ids: string[]
    }
    /** SessionMessageCreateInputSchema */
    SessionMessageCreateInputSchema: {
      /**
       * time to live (second)
       * @default 86400
       */
      ttl: number | null
      /** messages */
      messages: components['schemas']['SessionMessageCreateSchema'][]
      /** document type */
      document_type?: string | null
      /**
       * documents
       * @default []
       */
      documents: Record<string, never>[]
    }
    /** SessionMessageCreateSchema */
    SessionMessageCreateSchema: {
      /** role */
      role: string
      /** name */
      name?: string | null
      /** content */
      content: string
      /**
       * favorite
       * @default false
       */
      favorite: boolean | null
      /** evaluation */
      evaluation?: number | null
    }
    /**
     * SessionMessageResponseSchema
     * @description Prompt Session Response Schema
     */
    SessionMessageResponseSchema: {
      /**
       * Response Code
       * @default 20000000
       */
      response_code: number
      /**
       * Response Msg
       * @default OK
       */
      response_msg: string
      /** Messages */
      messages?: components['schemas']['SessionMessageSchema'][]
    }
    /** SessionMessageSchema */
    SessionMessageSchema: {
      /** message id */
      id: string
      /** message sequence */
      seq: number
      /** role */
      role: string
      /** name */
      name?: string | null
      /** content */
      content: string
      /** time to live (second) */
      ttl?: number | null
      /**
       * favorite
       * @default false
       */
      favorite: boolean
      /** evaluation */
      evaluation: number | null
    }
    /** SessionMessageUpdateInputSchema */
    SessionMessageUpdateInputSchema: {
      /** message id */
      id: number
      message: components['schemas']['SessionMessageUpdateSchema']
    }
    /** SessionMessageUpdateSchema */
    SessionMessageUpdateSchema: {
      /** role */
      role: string
      /** name */
      name?: string | null
      /** content */
      content: string
      /** time to live (second) */
      ttl?: number | null
      /**
       * favorite
       * @default false
       */
      favorite: boolean | null
      /** evaluation */
      evaluation?: number | null
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  health_v1_health_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServerHealthResponse']
        }
      }
    }
  }
  ready_v1_ready_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServerReadyResponse']
        }
      }
    }
  }
  metrics_handler_v1_metrics_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  get_prompt_catalogs_api_v1_prompt_list_get: {
    parameters: {
      query?: {
        project_id?: string | null
        prompt_ids?: string | null
      }
      header?: {
        'transaction-id'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PromptCatalogListResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_prompt_catalog_api_v1_prompt__prompt_id__get: {
    parameters: {
      query?: {
        top_k?: number
      }
      header?: {
        'conversation-id'?: string
        'transaction-id'?: string | null
      }
      path: {
        prompt_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PromptCatalogMessageResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_prompt_catalog_api_v1_prompt__prompt_id__delete: {
    parameters: {
      query?: never
      header?: {
        'transaction-id'?: string | null
      }
      path: {
        prompt_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  merge_prompt_catalog_api_v1_prompt_version_put: {
    parameters: {
      query?: never
      header?: {
        'user-id'?: string
        'transaction-id'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PromptCatalogVersionCreateSchema']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PromptCatalogVersionResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  update_prompt_catalog_version_api_v1_prompt_version_patch: {
    parameters: {
      query?: never
      header?: {
        'user-id'?: string
        'transaction-id'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PromptCatalogVersionUpdateSchema']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PromptCatalogVersionResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  create_default_prompt_catalog_api_v1_prompt_default__prompt_id__put: {
    parameters: {
      query?: never
      header?: {
        'user-id'?: string
        'transaction-id'?: string | null
      }
      path: {
        prompt_id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PromptCatalogDefaultCreateSchema']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PromptCatalogResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_prompt_catalog_version_api_v1_prompt_version__version_id__delete: {
    parameters: {
      query?: never
      header?: {
        'transaction-id'?: string | null
      }
      path: {
        version_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_messages_api_v1_session_get: {
    parameters: {
      query?: {
        k?: number | null
      }
      header?: {
        'conversation-id'?: string
        'transaction-id'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionMessageResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  add_messages_api_v1_session_post: {
    parameters: {
      query?: never
      header?: {
        'conversation-id'?: string
        'user-id'?: string
        'transaction-id'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SessionMessageCreateInputSchema']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  delete_messages_api_v1_session_delete: {
    parameters: {
      query?: never
      header?: {
        'conversation-id'?: string
        'transaction-id'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  update_message_api_v1_session_patch: {
    parameters: {
      query?: never
      header?: {
        'user-id'?: string
        'transaction-id'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SessionMessageUpdateInputSchema']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_conv_id_api_v1_session_conversation_id_get: {
    parameters: {
      query?: never
      header?: {
        'conversation-id'?: string
        'transaction-id'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  get_favorite_conversations_api_v1_session_conversations_get: {
    parameters: {
      query: {
        conversation_ids: string
      }
      header?: {
        'transaction-id'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SessionFavoriteConversationsResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  add_documents_api_v1_session_documents_post: {
    parameters: {
      query?: never
      header?: {
        'conversation-id'?: string
        'user-id'?: string
        'transaction-id'?: string | null
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SessionDocumentCreateInputSchema']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResponseSchema']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
}
